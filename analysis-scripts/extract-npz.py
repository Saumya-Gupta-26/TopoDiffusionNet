'''
image_sample.py generates an .npz file. This script extracts the images from the npz, when `save_intermediate_xstarts = False` in image_sample.py
'''

import numpy as np 
import pdb, os, sys
from PIL import Image

# NEED TO BE FILLED BY YOU
two_cls_cond = False # True if 0-dim and 1-dim are used simultaneously as condition
topo_constraint = True # True if topological constraint used as condition (for ADM-T and TDN models)
obj_cond = False # True if object type (eg: giraffe) is also used as condition
filepath="" # npz filepath generated by image_sample.py
ch = 3 # Number of channels in the image; 1 or 3

if topo_constraint:
    class_values = np.load(filepath)['arr_1']
    print("Class labels:\n{}".format(class_values))

if obj_cond:
    obj_values = np.load(filepath)['arr_2']
    print("Obj labels:\n{}".format(obj_values))

if two_cls_cond:
    a_values = np.load(filepath)['arr_1']
    print("y0 labels:\n{}".format(a_values))
    b_values = np.load(filepath)['arr_2']
    print("y1 labels:\n{}".format(b_values))

npzdata = np.load(filepath)['arr_0'] #(num_samples, image_size, image_size, 3)
savedir = filepath.split("samples_")[0]
if not os.path.exists(savedir):
    os.makedirs(savedir)

for i in range(npzdata.shape[0]):
    if ch == 1:
        img =  Image.fromarray(npzdata[i][:,:,0]) # take 1 channel
    elif ch == 3:
        img =  Image.fromarray(npzdata[i]) # take 3 channels

    if obj_cond:
        savename = "sample_{}_{}ch_{}label_{}obj.png".format(str(i).zfill(3), ch, class_values[i], obj_values[i])
    elif topo_constraint:
        savename = "sample_{}_{}ch_{}label.png".format(str(i).zfill(3), ch, class_values[i])
    elif two_cls_cond:
        savename = "sample_{}_{}ch_{}y0_{}y1.png".format(str(i).zfill(3), ch, a_values[i], b_values[i])
    else:
        savename = "sample_{}_{}ch.png".format(str(i).zfill(3), ch)

    img.save(os.path.join(savedir, savename))

print("Done!!")
